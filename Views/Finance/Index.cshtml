@model IEnumerable<FinanceManager.Models.Expense>
@{
    ViewData["Title"] = "Home Page";
    double TotalExpense = Model.Sum(expense => expense.Amount);
    var ShowCount = 5; // Number of items to show initially
}

<style>
    .hidden {
        display: none;
    }
</style>

<p>Expenses Count: @Model.Count()</p>
<p>First Expense Date: @Model.FirstOrDefault()?.DateTime.ToShortDateString()</p>

<div>
    <a asp-action="AddExpense" class="btn btn-primary">Add</a>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Date Added</th>
            <th>Name</th>
            <th>Description</th>
            <th>Amount</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Model.Count(); i++)
        {
            <tr class="expense-item @(i >= ShowCount ? "hidden" : "")">
                <td>@Model.ElementAt(i).DateTime.ToShortDateString()</td>
                <td>@Model.ElementAt(i).Name</td>
                <td>@Model.ElementAt(i).Description</td>
                <td>€@Model.ElementAt(i).Amount</td>
                <td>
                    <a asp-action="EditExpense" asp-route-id="@Model.ElementAt(i).Id" class="btn btn-warning btn-sm">Edit</a>
                    <form asp-action="DuplicateExpense" asp-route-Id="@Model.ElementAt(i).Id" style="display: inline;">
                        <input type="submit" value="Duplicate" class="btn btn-primary btn-sm">
                    </form>
                    <form asp-action="RemoveExpense" asp-route-Id="@Model.ElementAt(i).Id" style="display: inline;">
                        <input type="submit" value="Delete" class="btn btn-danger btn-sm">
                    </form>
                </td>
            </tr>
        }
        @if(Model.Any())
        {
            <tr>
                <td></td>
                <td><strong>Total</strong></td>
                <td><strong>The total amount of expenses</strong></td>
                <td><strong>€@Math.Round(TotalExpense, 2)</strong></td>
                <td>
                    <form asp-action="ResetExpenses" style="display: inline;">
                        <input type="submit" value="Reset All" class="btn btn-danger btn-sm" />
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

@if(Model.Count() > ShowCount)
{
    <button id="expandBtn" class="btn btn-info">Show More</button>
}

<div>
    <canvas id="expensesChart" width="400" height="200"></canvas>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var expandButton = document.getElementById('expandBtn');
        var itemsPerClick = 5; // Number of additional items to show per click
        var hiddenItems = Array.from(document.querySelectorAll('.expense-item.hidden'));

        if (expandButton) {
            expandButton.addEventListener('click', function () {
                // Find the next set of hidden items to show
                var itemsToShow = hiddenItems.splice(0, itemsPerClick);

                itemsToShow.forEach(function (item) {
                    item.classList.remove('hidden');
                });

                // Hide the button if there are no more hidden items
                if (hiddenItems.length === 0) {
                    expandButton.style.display = 'none';
                }
            });
        }
    });

    document.addEventListener('DOMContentLoaded', function () {
        fetch('@Url.Action("ExpenseChartDate")')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.length === 0) {
                    console.log('No data available for the chart.');
                    return;
                }

                // Adjust to match the JSON property names
                const labels = data.map(item => item.date);  // Use 'date' from JSON
                const totals = data.map(item => item.totalAmount);  // Use 'totalAmount' from JSON

                const ctx = document.getElementById('expensesChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Total Expenses',
                            data: totals,
                            borderColor: 'rgba(75, 192, 192, 1)',
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            x: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Date'
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Amount (€)'
                                }
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error fetching chart data:', error));
    });
</script>
